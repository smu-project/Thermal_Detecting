import os
import math

import torch.utils.data as data
from PIL import Image

from pathlib import Path
import fnmatch

import cv2


class CustomImage(data.Dataset):
    def __init__(self, root, transforms=None, num_images=-1, class_label=None, use_cv2=False):
        self.transforms = transforms

        self.files = {}
        self.files['file'] = []

        # target is used by evaluating classification network if not exist GT
        # it's generated by last dirname
        self.files['target'] = []

        self.cur = ''

        self.class_label = class_label

        self.use_cv2 = use_cv2

        if isinstance(root, list):
            self.files['file'].extend(root)
        elif os.path.isfile(root):
            self.files['file'].append(root)
        elif os.path.isdir(root):
            root = os.path.expanduser(root)

            if not os.path.exists(root):
                raise ("Not exist image folder {}".format(root))

            img_types = ('*.png', '*.jpg', '*.jpeg', '*.bmp',
                        '*.ppm', '*.pgm', '*.tif', '*.tiff',
                        '*.webp', '*.JPEG')

            cnt = 0
            if num_images < 0:
                num_images = math.inf

            for img_type in img_types:
                for path in Path(root).rglob('**/'+img_type):
                    if cnt < num_images:
                        self.files['file'].append(path)

                        cls_idx = self.get_class_idx(path)

                        if cls_idx is not None:
                            self.files['target'].append(cls_idx)

                        cnt+=1

            assert cnt != 0, f"[Error] Can't find any image for tracking at {root}"

    def __getitem__(self, index):
        hr = self.files['file'][index]

        img = Image.open(hr)

        if self.use_cv2:
            input = cv2.imread(hr)
        else:
            input = img
            input = input.convert('RGB')

        try:
            target = self.files['target'][index]
        except:
            target = 0

        if self.transforms is not None:
            input, target = self.transforms(input, target)

        self.cur = hr

        return input, target, img

    def get_fname(self):
        return self.cur

    def get_class_idx(self, path):
        class_label = self.class_label

        if class_label is None:
            return None

        dirname = os.path.dirname(path)
        dirname_last = os.path.split(dirname)[-1]

        class_idx = class_label.index(dirname_last)

        return class_idx

    def __len__(self):
        return len(self.files['file'])